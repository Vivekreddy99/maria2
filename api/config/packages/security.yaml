security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    encoders:
        App\Entity\Users:
            # Use native password encoder
            # This value auto-selects the best possible hashing algorithm
            # (i.e. Sodium when available).
            algorithm: auto
    providers:
       # users_in_memory: { memory: null }
        app_user_provider:
            entity:
                class: App\Entity\Users
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        oauth_token:
            pattern: ^/oauth/v2/token
            security: false
        api:
            pattern:    ^/v2
            # fos_oauth:  true
            stateless:  true
            anonymous:  false # can be omitted as its default value
            guard:
              authenticators:
                  - App\Security\TokenAuthenticator
        main:
            anonymous: lazy
            #provider: users_in_memory
            provider: app_user_provider
            guard:
                authenticators:
                    - App\Security\AppCustomAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route
                
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
            
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/v2, roles: ROLE_USER }
        - { path: ^/api, roles: [ IS_AUTHENTICATED_FULLY ] }

